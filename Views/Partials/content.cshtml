@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@using Umbraco.Web.Models
@using System.Text.RegularExpressions;
@using System.Text;

@{
	dynamic content = Model.Content.Children.Where("DocumentTypeAlias==\"PageContent\"").Count()>0 ? Model.Content.Children.Where("DocumentTypeAlias==\"PageContent\"").First() : null;


}


@if (content!=null){

	@renderContentLoop( content );
	
}

@helper renderContentLoop(dynamic content){

	@* render non image content tile content *@
	foreach (var item in content.Children.Where("DocumentTypeAlias.ToLower().IndexOf(\"tile\")==-1")){
		
		@renderContent(item);

		if (item.DocumentTypeAlias=="PageSubSection"){
			@renderContentLoop(item);
			<div class="cmp-section-spacer"></div>
		}
	}
	
	@* render image tile content *@
	var tileContent = content.Children.Where("DocumentTypeAlias.ToLower().IndexOf(\"tile\")!=-1");
	if (tileContent.Count()!=0){
		<ul class="cmp-tile clearfix @if(content.TwoColumnMobileTiles){@("cmp-tile-2col");}">
			@foreach (var item in tileContent){
				
				@renderTileContent(item);
		
			}
		</ul>
	}
		
}


@helper renderContent(dynamic item){
	@*@item.DocumentTypeAlias*@
	
	if (item.DocumentTypeAlias=="LargeTextCentreAligned"){
		@renderLargeTextCenter(item)
	}
	if (item.DocumentTypeAlias=="LargeTextLeftAligned"){
		@renderLargeTextLeft(item)
	}	
	if (item.DocumentTypeAlias=="RichText"){
		@renderText(item)
	}
	
	if (item.DocumentTypeAlias=="twoColumnSplit"){
		<div class="cmp-2col clearfix">@foreach (var item2 in item.Children){<div class="cmp-2col-col@(item2.Index()+1)">
				@renderContent(item2)
			</div>}</div>
	}
	if (item.DocumentTypeAlias=="threeColumnSplit"){
		<div class="cmp-3col clearfix">@foreach (var item2 in item.Children){<div class="cmp-3col-col@(item2.Index()+1)">
				@renderContent(item2)
			</div>}</div>
	}
}


@helper renderLargeTextCenter(dynamic item) {
	
	<div class="cmp-section-top-height cmp-large-text cmp-large-text-center">
		<div class="cmp-large-text-center-cell">
			@item.text
		</div>
	</div>
		
}


@helper renderLargeTextLeft(dynamic item) {
	string text = item.text.ToString();
	
	<div class="cmp-section-top-height cmp-large-text @(item.supersizeMe ? "super-large" : "")">
		@if (item.isClientList){
			text = Regex.Replace(text, @"\<p\>|<\/p>", "", RegexOptions.IgnoreCase);
			text = Regex.Replace(text, @"<br\/>|<br>|<br \/>", "|", RegexOptions.IgnoreCase);
			var textA = text.Split('|');
			StringBuilder sb = new StringBuilder();
			sb.Append("<p class=\"cmp-large-text-clients\">");
			foreach(string text2 in textA){
				sb.Append("<span>"+text2+"</span>");
			}
			sb.Append("</p>");
			text = sb.ToString();
		}
		@Html.Raw(text)
	</div>	
}

@helper renderText(dynamic item) {
	<div class="cmp-text">
		@item.text
		@if (item.showShareLinks){
			<div class="cmp-text-social">
				<span>Share</span>
				<ul>
					<li><a href="#" class="icons-F"><span>Facebook</span></a></li>
					<li><a href="#" class="icons-Y"><span>youTube</span></a></li>					
					<li><a href="#" class="icons-T"><span>Twitter</span></a></li>					
					<li><a href="#" class="icons-P"><span>Pinterest</span></a></li>			
					<li><a href="#" class="icons-I"><span>Instagram</span></a></li>	
				</ul>
			</div>
		}
	</div>	
}


@helper renderTileContent(dynamic item){

	string caption = "";
	string src =  "";	
	string url = "";
	
	if (item.DocumentTypeAlias=="ContentTile"){
		if (item.HasValue("media")){
			dynamic media = Umbraco.Media(item.media);
			caption = item.caption.ToString();
			string crop = item.portraitOrientation ? "Portrait" : "Landscape";
			src =  media.GetResponsiveCropUrl(crop, "image");
			url = item.Children.Where("DocumentTypeAlias==\"PageContent\"").Count()!=0 ? item.Url : "";
		}
	}
	

	if (item.DocumentTypeAlias=="ContentTileAlias" && item.HasValue("alias")){

		dynamic content = Umbraco.Content(item.alias);
		if (content.DocumentTypeAlias=="ContentTile"){
			dynamic media = Umbraco.Media(content.media);
			if (content.HasValue("media")){
				caption = content.caption.ToString();
				string crop = content.portraitOrientation ? "Portrait" : "Landscape";
				src =  media.GetResponsiveCropUrl(crop, "image");
				url = content.Url;
			}
		}
	}
	

	if (src!=""){
		<li>
		@if (url==""){
			<span class="cmp-tile-image"><img src="@src" alt="@(caption=="" ? "*" : caption)"/></span>
			<span class="cmp-tile-caption">@caption</span>
		} else {
			<a href="@url" class="cmp-tile-image"><img src="@src" alt="*"/></a>
			<a href="@url" class="cmp-tile-caption">@caption</a>
		}
		</li>
	}

}





